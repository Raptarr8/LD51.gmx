<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wave = 0;
waveProgress = 0;
isWave = 0;

enemyCount[0] = 50;
enemyCount[1] = 0;
enemyCount[2] = 0;
enemyCount[3] = 0;
enemyCount[4] = 0;
enemyCount[5] = 0;
enemyCount[6] = 0;
enemyCount[7] = 0;

waveTimer = 0;
spawnDelay = 0;
spawnPhase = 0;
spawnCount[0] = 0;
spawnCount[1] = 0;
spawnCount[2] = 0;
spawnCount[3] = 0;
spawnCount[4] = 0;
spawnCount[5] = 0;
spawnCount[6] = 0;
spawnCount[7] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(isWave)
{
    waveTimer+=global.dt_ratio;
    switch(wave)
    {
        case 0:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[0] - instance_number(objBasicEnemy))/50;
            if(spawnDelay &gt; 5 &amp;&amp; spawnCount[0] &lt; 50)
            {
                spawnDelay = 0;
                spawnCount[0]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 40), objBasicEnemy);
            }
            if(spawnCount[0]&gt;= 50 &amp;&amp; !instance_exists(prtEnemy))
            {
                scrResetWaveControl();
                enemyCount[0] = 15;
                enemyCount[1] = 3;
            }
            break;
        case 1:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[0] + spawnCount[1] - instance_number(prtEnemy))/21;
            if(spawnDelay &gt; 10 &amp;&amp; spawnCount[0] &lt; 15)
            {
                spawnDelay = 0;
                spawnCount[0]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 40), objBasicEnemy);
            }
            if(!instance_exists(objBomberDrone) &amp;&amp; !instance_exists(objBomb) &amp;&amp; spawnCount[1] &lt; 3)
            {
                spawnCount[1]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 40), objBomberDrone);
            }
            if(spawnCount[0] + spawnCount[1] &gt;= 18 &amp;&amp; !instance_exists(prtEnemy))
            {
                scrResetWaveControl();
                enemyCount[0] = 10;
                enemyCount[2] = 6;
            }
            break;
        case 2:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[0] + spawnCount[2] - instance_number(prtEnemy))/16;
            if(spawnDelay &gt; 10 &amp;&amp; spawnCount[0] &lt; 10)
            {
                spawnDelay = 0;
                spawnCount[0]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 40), objBasicEnemy);
            }
            if(spawnDelay &gt; 20 &amp;&amp; spawnCount[0] &gt;= 10 &amp;&amp; spawnCount[2] &lt; 6)
            {
                spawnDelay = 0;
                spawnCount[2]++;
                instance_create(irandom_range(0,view_wview),-16+view_hview*(spawnCount[2]%2==0),objHoverMine);
            }
            if(spawnCount[0] + spawnCount[2] &gt;= 16 &amp;&amp; !instance_exists(prtEnemy) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                scrResetWaveControl();
                spawnPhase = -1;
                enemyCount[1] = 4;
                enemyCount[2] = 20;
            }
            break;
        case 3:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[2] - instance_number(prtEnemy))/20;
            switch(spawnPhase)
            {
                case -1:
                    for(var i = 0; i &lt; 4; i++)
                    {
                        var j = instance_create(0,0,objBomberDrone);
                        j.angle = i*90;
                    }
                    spawnPhase = 0;
                    break;
                case 0:
                    if(spawnDelay &gt; 20 &amp;&amp; spawnCount[2] &lt; 5)
                    {
                        spawnDelay = 0;
                        spawnCount[2]++;
                        instance_create(irandom_range(0,view_wview),-16+view_hview*(spawnCount[2]%2==0),objHoverMine);
                    }
                    break;
                case 1:
                    if(spawnDelay &gt; 15 &amp;&amp; spawnCount[2] &lt; 10)
                    {
                        spawnDelay = 0;
                        spawnCount[2]++;
                        instance_create(irandom_range(0,view_wview),-16+view_hview*(spawnCount[2]%2==0),objHoverMine);
                    }
                    break;
                case 2:
                    if(spawnDelay &gt; 10 &amp;&amp; spawnCount[2] &lt; 15)
                    {
                        spawnDelay = 0;
                        spawnCount[2]++;
                        instance_create(irandom_range(0,view_wview),-16+view_hview*(spawnCount[2]%2==0),objHoverMine);
                    }
                    break;
                case 3:
                    if(spawnDelay &gt; 5 &amp;&amp; spawnCount[2] &lt; 20)
                    {
                        spawnDelay = 0;
                        spawnCount[2]++;
                        instance_create(irandom_range(0,view_wview),-16+view_hview*(spawnCount[2]%2==0),objHoverMine);
                    }
                    break;
            }
            if(spawnCount[2] == 5 &amp;&amp; !instance_exists(objHoverMine) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                spawnPhase = 1;
            }
            if(spawnCount[2] == 10 &amp;&amp; !instance_exists(objHoverMine) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                spawnPhase = 2;
            }
            if(spawnCount[2] == 15 &amp;&amp; !instance_exists(objHoverMine) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                spawnPhase = 3;
            }
            if(spawnCount[2] &gt;= 20 &amp;&amp; !instance_exists(prtEnemy) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                scrResetWaveControl();
                enemyCount[0] = 10;
                enemyCount[3] = 3;
            }
            break;
        case 4:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[0] + spawnCount[3] - instance_number(prtEnemy))/18;
            if(spawnDelay &gt; 10 &amp;&amp; spawnCount[0] &lt; 15)
            {
                spawnDelay = 0;
                spawnCount[0]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 40), objBasicEnemy);
            }
            if(!instance_exists(objBounceCannon) &amp;&amp; spawnCount[3] &lt; 3)
            {
                spawnCount[3]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 72), objBounceCannon);
            }
            if(spawnCount[0] + spawnCount[3] &gt;= 18 &amp;&amp; !instance_exists(prtEnemy))
            {
                scrResetWaveControl();
                enemyCount[0] = 35;
                enemyCount[4] = 3;
            }
            break;
        case 5:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[0] + spawnCount[4] - instance_number(prtEnemy))/38;
            if(spawnDelay &gt; 10 &amp;&amp; spawnCount[0] &lt; 35)
            {
                if(spawnCount[4] &lt; 3)
                {
                    spawnCount[4]++;
                    instance_create(irandom_range(0,view_wview),-16, objSniperEnemy);
                }
                spawnDelay = 0;
                spawnCount[0]++;
                instance_create(view_xview + view_wview + 16, irandom_range(view_yview, view_yview + view_hview - 40), objBasicEnemy);
            }
            if(spawnCount[0] + spawnCount[4] &gt;= 38 &amp;&amp; !instance_exists(prtEnemy))
            {
                scrResetWaveControl();
                enemyCount[5] = 8;
            }
            break;
        case 6:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[5] - instance_number(prtEnemy))/8;
            if(spawnDelay &gt; 10 &amp;&amp; spawnCount[5] &lt; 8)
            {
                spawnDelay = 0;
                spawnCount[5]++;
                instance_create(irandom_range(0,view_wview),-16+view_hview*(spawnCount[5]%2==0),objNode);
            }
            if(spawnCount[0] + spawnCount[5] &gt;= 8 &amp;&amp; !instance_exists(prtEnemy) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                scrResetWaveControl();
                enemyCount[5] = 12;
            }
            break;
        case 7:
            spawnDelay += global.dt_ratio;
            waveProgress = (spawnCount[5] - instance_number(prtEnemy))/8;
            if(spawnDelay &gt; 10 &amp;&amp; spawnCount[5] &lt; 12)
            {
                spawnDelay = 0;
                spawnCount[5]++;
                var i = instance_create(view_wview/2,view_hview/2,objNode);
                    i.dir = spawnCount[5]*360/12
            }
            if(spawnCount[0] + spawnCount[5] &gt;= 8 &amp;&amp; !instance_exists(prtEnemy) &amp;&amp; !instance_exists(prtEnemyProjectile))
            {
                scrResetWaveControl();
                enemyCount[5] = 20;
            }
            break;
    }
}
else
{
    waveTimer+=global.dt_ratio;
    if(waveTimer &gt; 120)
    {
        waveTimer = 0;
        isWave = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprGUI, 0, view_xview, view_yview+view_hview-32);
draw_sprite_ext(sprClockHand, 0, view_xview + view_wview - 16, view_yview + view_hview - 16, 1, 1, -lerp((1-1/(wave+1))*360,(1-1/(wave+2))*360,waveProgress)+90,image_blend, image_alpha)
if(objPlayer.shieldCooldown &lt;= 0)
{
    draw_set_color($7428ff)
}
else
{
    draw_set_color(merge_color($7428ff,$6a3cd5,abs(sin(degtorad(objPlayer.shieldCooldown)))))
}
draw_rectangle(0,view_hview-16,64-(objPlayer.shieldCooldown/600)*64,view_hview,false);
draw_set_color(c_white)

if(!isWave)
{
    var xcenter = view_xview + view_wview/2;
    var ycenter = view_yview + 32;
    var enemyOffset = 32;
    if(waveTimer &gt; 15)
    {
        draw_sprite(sprWaveText, 0, xcenter-16, ycenter);
    }
    if(waveTimer &gt; 30)
    {
        draw_sprite(sprWaveText, wave+1, xcenter+16, ycenter);
    }
    if(waveTimer &gt; 45)
    {
        if(enemyCount[0] &gt; 0 &amp;&amp; waveTimer &gt; 45 + enemyOffset)
        {
            draw_sprite(sprEnemy, 0, xcenter-8,ycenter+enemyOffset);
            draw_set_valign(fa_middle);
            draw_text(xcenter+16,ycenter+enemyOffset,"x"+string(enemyCount[0]));
            enemyOffset += 16;
        }
        if(enemyCount[1] &gt; 0 &amp;&amp; waveTimer &gt; 45 + enemyOffset)
        {
            draw_sprite(sprBomberDrone, 0, xcenter-8,ycenter+enemyOffset);
            draw_set_valign(fa_middle);
            draw_text(xcenter+16,ycenter+enemyOffset,"x"+string(enemyCount[1]));
            enemyOffset += 16;
        }
        if(enemyCount[2] &gt; 0 &amp;&amp; waveTimer &gt; 45 + enemyOffset)
        {
            draw_sprite(sprHoverMine, 0, xcenter-8,ycenter+enemyOffset);
            draw_set_valign(fa_middle);
            draw_text(xcenter+16,ycenter+enemyOffset,"x"+string(enemyCount[2]));
            enemyOffset += 16;
        }
        if(enemyCount[3] &gt; 0 &amp;&amp; waveTimer &gt; 45 + enemyOffset)
        {
            draw_sprite(sprBounceCannon, 0, xcenter-8,ycenter+enemyOffset);
            draw_sprite(sprBounceCannonCannon, 0, xcenter-8,ycenter+enemyOffset);
            draw_set_valign(fa_middle);
            draw_text(xcenter+16,ycenter+enemyOffset,"x"+string(enemyCount[3]));
            enemyOffset += 16;
        }
        if(enemyCount[4] &gt; 0 &amp;&amp; waveTimer &gt; 45 + enemyOffset)
        {
            draw_sprite(sprSniper, 0, xcenter-8,ycenter+enemyOffset);
            draw_set_valign(fa_middle);
            draw_text(xcenter+16,ycenter+enemyOffset,"x"+string(enemyCount[4]));
            enemyOffset += 16;
        }
        if(enemyCount[5] &gt; 0 &amp;&amp; waveTimer &gt; 45 + enemyOffset*15/16)
        {
            draw_sprite(sprNode, 0, xcenter-8,ycenter+enemyOffset);
            draw_set_valign(fa_middle);
            draw_text(xcenter+16,ycenter+enemyOffset,"x"+string(enemyCount[5]));
            enemyOffset += 16;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveProgress += 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wave += 1;
waveProgress = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
